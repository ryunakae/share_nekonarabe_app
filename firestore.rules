rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false
    }

    match /cards/{cardId} {
      function isCardInTheEnumFront() {
        return request.resource.data.front in ["head","pink","water","almighty"];
      }
      function isCardInTheEnumBack() {
        return request.resource.data.back in ["tail","pink","water","almighty","head"];
      }
      function isCardInTheEnumCardType() {
        return request.resource.data.cardType in ["ribbon","buchi","shima","fish","dokan"];
      }
      function isEqualIDZero() {
        return request.resource.id[0] == "0"
      }
      function isEqualPointsZero() {
        return request.resource.data.points == 0
      }
      function isEqualIDOne() {
        return request.resource.id[0] == "1"
      }
      function isEqualPointsOne() {
        return request.resource.data.points == 1
      }
      function isEqualIDTwo() {
        return request.resource.id[0] == "2"
      }
      function isEqualPointsTwo() {
        return request.resource.data.points == 2
      }
      function isEqualPointsAndID() {
        return (isEqualIDZero() && isEqualPointsZero()) || (isEqualIDOne() && isEqualPointsOne()) || (isEqualIDTwo() && isEqualPointsTwo())
      }
      function isEqualFrontAndID() {
        return request.resource.id[1] == request.resource.data.front[0]
      }
      function isEqualBackAndID() {
        return request.resource.id[2] == request.resource.data.back[0]
      }
      function isEqualCardTypeAndID() {
        return request.resource.id[3] == request.resource.data.cardType[0]
      }
      function isTrueInitiality() {
        return request.resource.data.initiality == true
      }
      function isFalseInitiality() {
        return request.resource.data.initiality == false
      }
      function hasCorrectInitiality() {
        return (isTrueInitiality() && request.resource.id[4] == "i") || (isFalseInitiality() && request.resource.id[4] == "n")
      }
      function isSuccessfulCard() {
        return isCardInTheEnumFront() && isCardInTheEnumBack() && isCardInTheEnumCardType() && isEqualPointsAndID() && isEqualFrontAndID() && isEqualBackAndID() && isEqualCardTypeAndID() && hasCorrectInitiality()
      }

      allow read: if true
      allow create: if isSuccessfulCard()
    }

    match /tables/{tableId} {
    
      function isSuccessfulTable() {
        return true
      }
      function isAllowedChangeForTable() {
        return true
      }

      allow read: if true
      allow create: if isSuccessfulTable()
      allow update: if isSuccessfulTable() && isAllowedChangeForTable()
      
      // match /deck/{deckCardId} {
      //   function isSuccessfulDeckCard() {
      //     return true
      //   }

      //   allow read: if true
      //   allow create: if isSuccessfulDeckCard()
      // }

      match /players/{prayerId} {
        function isSuccessfulPlayer() {
          return true
        }

        allow read: if true
        allow write: if isSuccessfulPlayer()
      }
    }
  }
}